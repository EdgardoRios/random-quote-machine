{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RandomQuote","props","getNewQuote","getQuote","state","quote","author","this","axios","get","then","response","data","quotes","randomQuote","Math","floor","random","length","console","log","setState","id","className","href","target","title","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iSAyEeA,E,kDArEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAkCRC,YAAc,WACZ,EAAKC,YAjCL,EAAKC,MAAQ,CACXC,MAAO,GACPC,OAAQ,IALO,E,gEAWjBC,KAAKJ,a,iCAGK,IAAD,OAITK,IAAMC,IAFI,0IAGPC,MAAK,SAAAC,GAEJ,IAAIC,EAAOD,EAASC,KAAKC,OAIrBC,EAAcF,EAFAG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,SAGlDC,QAAQC,IAAIN,GAEZ,EAAKO,SAAS,CACZhB,MAAOS,EAAW,MAClBR,OAAQQ,EAAW,c,+BAWzB,IAAMT,EAAQE,KAAKH,MAAMC,MACnBC,EAASC,KAAKH,MAAME,OAC1B,OACE,yBAAKgB,GAAG,WACN,wBAAIC,UAAU,SAAd,wBACA,yBAAKD,GAAG,aACN,yBAAKA,GAAG,QAAO,2BAAIjB,IACnB,yBAAKiB,GAAG,UAAS,4BAAKhB,IACtB,yBAAKgB,GAAG,WACN,uBACEA,GAAG,cACHE,KAAI,iDAA4CnB,EAA5C,eAAwDC,GAC5DmB,OAAO,SACPC,MAAM,+BACJ,8BACE,uBAAGH,UAAU,kCAGnB,4BAAQA,UAAU,UAAUD,GAAG,YAAYK,QAASpB,KAAKL,aAAzD,oB,GA5Dc0B,aCSNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.72c53551.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass RandomQuote extends Component {\n  constructor(props) {\n    super(props);\n    //console.log('constructor runs');\n    this.state = {\n      quote: '',\n      author: ''\n    };\n  }\n\n  componentDidMount() {\n    //console.log('componentDidMount runs');\n    this.getQuote();\n  }\n\n  getQuote() {\n    //console.log('getQuote runs');\n    let url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n\n    axios.get(url)\n      .then(response => {\n        //console.log(response);\n        let data = response.data.quotes;\n        //console.log(data);\n        let quoteNumber = Math.floor(Math.random() * data.length);\n        //console.log(quoteNumber);\n        let randomQuote = data[quoteNumber];\n        console.log(randomQuote);\n\n        this.setState({\n          quote: randomQuote['quote'],\n          author: randomQuote['author']\n        });\n      });\n  }\n\n  getNewQuote = () => {\n    this.getQuote();\n  }\n\n  render() {\n    //console.log('render method runs');\n    const quote = this.state.quote;\n    const author = this.state.author;\n    return (\n      <div id='wrapper'>\n        <h1 className='title'>Random Quote Machine</h1>\n        <div id='quote-box'>\n          <div id='text'><p>{quote}</p></div>\n          <div id='author'><h5>{author}</h5></div>\n          <div id='buttons'>\n            <a\n              id='tweet-quote'\n              href={`https://twitter.com/intent/tweet?text=\"${quote}\"   ${author}`}\n              target='_blank'\n              title=\"Post this quote on twitter!\">\n                <span>\n                  <i className='fab fa-twitter twiiter-icon'/>\n                </span>\n            </a>\n            <button className='buttons' id='new-quote' onClick={this.getNewQuote}>\n              New Quote\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RandomQuote;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}